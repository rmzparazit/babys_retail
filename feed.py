from playwright.sync_api import sync_playwright
import time
import random
import json
import os
import re
from datetime import datetime
import hashlib
import shutil

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
OUTPUT_DIR = "output"
PROGRESS_FILE = os.path.join(OUTPUT_DIR, "progress.json")
YML_FILE = os.path.join(OUTPUT_DIR, "paomma_catalog.xml")
TEMP_YML_FILE = YML_FILE + ".tmp"  # –î–ª—è –∞—Ç–æ–º–∞—Ä–Ω–æ–π –∑–∞–ø–∏—Å–∏

os.makedirs(OUTPUT_DIR, exist_ok=True)

USER_AGENT = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'

# --- –ö–û–õ–õ–ï–ö–¶–ò–ò: ID –∏ –∏–º—è ---
COLLECTIONS = {
    "poilniki": {"name": "–ü–æ–∏–ª—å–Ω–∏–∫–∏", "id": "952113747654"},
    "prorezyvateli": {"name": "–ü—Ä–æ—Ä–µ–∑—ã–≤–∞—Ç–µ–ª–∏", "id": "206682998845"},
    "soski": {"name": "–°–æ—Å–∫–∏", "id": "169064286158"},
    "pustyshki": {"name": "–ü—É—Å—Ç—ã—à–∫–∏", "id": "897379413064"},
    "derzhateli": {"name": "–î–µ—Ä–∂–∞—Ç–µ–ª–∏", "id": "41033353415"},
    "futlyary": {"name": "–§—É—Ç–ª—è—Ä—ã", "id": "571209369666"},
    "smesi": {"name": "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –¥–ª—è —Å–º–µ—Å–∏", "id": "952891154747"},
    "molokootsosy": {"name": "–ú–æ–ª–æ–∫–æ–æ—Ç—Å–æ—Å—ã", "id": "918219204990"},
    "butylochki": {"name": "–ë—É—Ç—ã–ª–æ—á–∫–∏ –∏ –º–æ–ª–æ–∫–æ–æ—Ç—Å–æ—Å", "id": "876147046474"}
}

# --- –§–ò–õ–¨–¢–†–´ ---
FILTERS = [
    {"name": "–ü–æ–∏–ª—å–Ω–∏–∫–∏", "url": "https://paomma.ru/catalog/poilniki", "collection": "poilniki"},
    {"name": "–ü—Ä–æ—Ä–µ–∑—ã–≤–∞—Ç–µ–ª–∏", "url": "https://paomma.ru/catalog/prorezyvateli", "collection": "prorezyvateli"},
    {"name": "–°–æ—Å–∫–∏", "url": "https://paomma.ru/catalog/antikolikovye-soski", "collection": "soski"},
    {"name": "–ü—É—Å—Ç—ã—à–∫–∏", "url": "https://paomma.ru/catalog/pustyshki", "collection": "pustyshki"},
    {"name": "–î–µ—Ä–∂–∞—Ç–µ–ª–∏", "url": "https://paomma.ru/catalog/derzhateli-dlya-pustyshek", "collection": "derzhateli"},
    {"name": "–§—É—Ç–ª—è—Ä—ã", "url": "https://paomma.ru/catalog/konteyner-dlya-pustyshek", "collection": "futlyary"},
    {"name": "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –¥–ª—è —Å–º–µ—Å–∏", "url": "https://paomma.ru/catalog/konteynery-dlya-smesi", "collection": "smesi"},
    {"name": "–ë—É—Ç—ã–ª–æ—á–∫–∏ –∏ –º–æ–ª–æ–∫–æ–æ—Ç—Å–æ—Å", "url": "https://paomma.ru/catalog/butylochki-dlya-kormleniya", "collection": "butylochki"},
    {"name": "–ú–æ–ª–æ–∫–æ–æ—Ç—Å–æ—Å—ã", "url": "https://paomma.ru/catalog/molokootsos", "collection": "molokootsosy"}
]

# --- –ü–ï–†–ï–í–û–î –¶–í–ï–¢–û–í ---
COLOR_TRANSLATION = {
    'Light grey': '–°–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π', 'Taupe': '–¢–∞—É–ø', 'Sage': '–®–∞–ª—Ñ–µ–π', 'Zephyr': '–ó–µ—Ñ–∏—Ä',
    'Buttercream': '–°–ª–∏–≤–æ—á–Ω—ã–π', 'Almond milk': '–ú–æ–ª–æ–∫–æ –º–∏–Ω–¥–∞–ª—è', 'Navy': '–¢–µ–º–Ω–æ-—Å–∏–Ω–∏–π',
    'Mushroom': '–ì—Ä–∏–±–Ω–æ–π', 'Black': '–ß–µ—Ä–Ω—ã–π', 'Hazelnut': '–õ–µ—Å–Ω–æ–π –æ—Ä–µ—Ö', 'Cream': '–ö—Ä–µ–º–æ–≤—ã–π',
    'Beige': '–ë–µ–∂–µ–≤—ã–π', 'Pink': '–†–æ–∑–æ–≤—ã–π', 'Grey': '–°–µ—Ä—ã–π'
}

def translate_color(en_color):
    ru_color = COLOR_TRANSLATION.get(en_color.strip(), '')
    if ru_color:
        return f"{en_color.strip()} ({ru_color})"
    return en_color.strip()

# --- –õ–û–ì–ò–ö–ê ---
def log(msg):
    timestamp = time.strftime("%Y-%m-%d %H:%M:%S")
    print(f"[{timestamp}] {msg}")

def load_progress():
    if os.path.exists(PROGRESS_FILE):
        try:
            with open(PROGRESS_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception as e:
            log(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")
    return {"products": []}

def save_progress(products):
    try:
        clean = [p for p in products if p.get('vendorCode') and p.get('name') and p.get('link')]
        seen = set()
        unique = []
        for p in clean:
            link = p['link'].strip().split('#')[0]
            if not link or '#order' in link or '#catalog' in link or '#popup-buy' in link or link.endswith('/'):
                continue
            if link not in seen:
                seen.add(link)
                unique.append(p)
        with open(PROGRESS_FILE, 'w', encoding='utf-8') as f:
            json.dump({"products": unique}, f, ensure_ascii=False, indent=4)
        log(f"‚úÖ –ü—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {len(unique)} —Ç–æ–≤–∞—Ä–æ–≤")
    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

def parse_product_page(page, url):
    max_retries = 3
    for attempt in range(max_retries):
        try:
            log(f"  üîÑ –û—Ç–∫—Ä—ã–≤–∞–µ–º: {url}")
            page.goto(url.strip(), wait_until='networkidle', timeout=30000)
            page.wait_for_timeout(2000)

            result = {
                'name': '', 'price': '0', 'vendorCode': '', 'image': '',
                'additional_images': [], 'color': '', 'material': '', 'age': '',
                'size': '', 'volume': '', 'composition': '', 'handle': '', 'description': '',
                'category_hint': ''
            }

            base = page.evaluate("""(url) => {
                const data = {};
                const nameEl = document.querySelector('h1') || 
                               document.querySelector('.t-store__t-product__title') ||
                               document.querySelector('.t-product__title') ||
                               document.querySelector('.t706__title');
                let name = nameEl ? nameEl.innerText.trim() : '';

                let categoryHint = '';
                if (url.includes('/steklyannaya-gb')) {
                    categoryHint = 'butylochka';
                } else if (url.includes('/molokootsos')) {
                    categoryHint = 'molokootsos';
                } else if (url.includes('/antikolikovye-soski')) {
                    categoryHint = 'soska';
                } else if (url.includes('/pustyshki')) {
                    categoryHint = 'pustyshka';
                } else if (url.includes('/prorezyvateli')) {
                    categoryHint = 'prorezyvatel';
                } else if (url.includes('/poilniki')) {
                    categoryHint = 'poilnik';
                }

                // --- –ì–ï–ù–ï–†–ê–¶–ò–Ø –ù–ê–ó–í–ê–ù–ò–Ø –î–õ–Ø –ë–ï–ó–´–ú–Ø–ù–ù–´–• –¢–û–í–ê–†–û–í ---
                if (!name || 
                    name.toLowerCase().includes('glass') || 
                    name.toLowerCase().includes('gb') || 
                    name === '–¢–æ–≤–∞—Ä—ã –¥–ª—è –Ω–æ–≤–æ—Ä–æ–∂–¥–µ–Ω–Ω—ã—Ö' || 
                    name.toLowerCase().includes('chehol') ||
                    /^\\w+\\s+\\d{3}$/.test(name) ||  // "Zephyr 180"
                    /^Glass\\s+[\\w\\s]+\\d{3}$/.test(name)  // "Glass Almond milk 240"
                ) {
                    if (url.includes('/steklyannaya-gb')) {
                        const match = url.match(/gb(\\d+)/i);
                        const size = match ? match[1] : '300';
                        name = `–°—Ç–µ–∫–ª—è–Ω–Ω–∞—è –±—É—Ç—ã–ª–æ—á–∫–∞ ${size} –º–ª`;
                    } else if (url.includes('/molokootsos')) {
                        name = '–ú–æ–ª–æ–∫–æ–æ—Ç—Å–æ—Å —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π –±–µ—Å–ø—Ä–æ–≤–æ–¥–Ω–æ–π';
                    } else if (url.includes('/antikolikovye-soski')) {
                        name = '–ê–Ω—Ç–∏–∫–æ–ª–∏–∫–æ–≤–∞—è —Å–æ—Å–∫–∞ –¥–ª—è –±—É—Ç—ã–ª–æ—á–∫–∏';
                    } else if (url.includes('/pustyshki')) {
                        name = '–ü—É—Å—Ç—ã—à–∫–∞ –¥–ª—è –Ω–æ–≤–æ—Ä–æ–∂–¥—ë–Ω–Ω—ã—Ö';
                    } else if (url.includes('/prorezyvateli')) {
                        name = '–ü—Ä–æ—Ä–µ–∑—ã–≤–∞—Ç–µ–ª—å –¥–ª—è –¥–µ—Ç–µ–π';
                    } else if (url.includes('/poilniki')) {
                        name = '–ü–æ–∏–ª—å–Ω–∏–∫ –¥–ª—è –¥–µ—Ç–µ–π';
                    } else if (url.includes('/silikonovyy-chehol') || name.toLowerCase().includes('chehol')) {
                        name = '–°–∏–ª–∏–∫–æ–Ω–æ–≤—ã–π —á–µ—Ö–æ–ª –¥–ª—è –±—É—Ç—ã–ª–æ—á–∫–∏';
                    } else if (/^Glass\\s+([\\w\\s]+)\\s+(\\d{3})$/.test(name)) {
                        const match = name.match(/^Glass\\s+([\\w\\s]+)\\s+(\\d{3})$/);
                        const color = match[1].trim();
                        const volume = match[2];
                        name = `–°—Ç–µ–∫–ª—è–Ω–Ω–∞—è –±—É—Ç—ã–ª–æ—á–∫–∞ ${color}, ${volume} –º–ª`;
                    } else if (/^\\w+\\s+\\d{3}$/.test(name)) {
                        const parts = name.trim().split(/\\s+/);
                        const volume = parts.pop();
                        const color = parts.join(' ');
                        if (volume && volume.match(/^\\d{3}$/)) {
                            name = `–ü–ª–∞—Å—Ç–∏–∫–æ–≤–∞—è –±—É—Ç—ã–ª–æ—á–∫–∞ ${color}, ${volume} –º–ª`;
                        }
                    } else if (name.toLowerCase().includes('glass')) {
                        name = '–°—Ç–µ–∫–ª—è–Ω–Ω–∞—è –±—É—Ç—ã–ª–æ—á–∫–∞';
                    }
                }

                data.name = name;
                data.categoryHint = categoryHint;

                const skuEl = document.querySelector('.js-store-prod-sku');
                data.vendorCode = skuEl ? skuEl.innerText.replace(/–ê—Ä—Ç–∏–∫—É–ª[:\\s]*/i, '').trim() : '';
                const mainImg = document.querySelector('.t-slds__item_active img');
                data.image = mainImg ? (mainImg.src || mainImg.dataset.original || '') : '';
                const colorBtn = document.querySelector('.t-product__option-item_active [name="–¶–≤–µ—Ç"]');
                data.color = colorBtn ? colorBtn.value.trim().split(':')[0].split('/catalog')[0] : '–ù–µ —É–∫–∞–∑–∞–Ω';
                const materialBtn = document.querySelector('.t-product__option-item_active [name="–ú–∞—Ç–µ—Ä–∏–∞–ª"]');
                data.material = materialBtn ? materialBtn.value.trim() : '';
                const descEl = document.querySelector('.t-text, .t-store__t-product__desc');
                data.description = descEl ? descEl.innerText.trim() : '';
                data.additional_images = Array.from(document.querySelectorAll('.t-slds__item img'))
                    .map(img => img.src || img.dataset.original || '').filter(src => src && src.endsWith('.jpg'));
                return data;
            }""", url)

            result.update({k: v for k, v in base.items() if v})

            tabs = page.evaluate("""() => {
                const res = {};
                const buttons = document.querySelectorAll('.t-store__tabs__item-button');
                const contents = document.querySelectorAll('.t-store__tabs__content');
                buttons.forEach((btn, i) => {
                    const title = btn.getAttribute('data-tab-title')?.trim();
                    if (title && i < contents.length) {
                        res[title.toLowerCase()] = contents[i].innerText.trim();
                    }
                });
                return res;
            }""")

            if '—Å–æ—Å—Ç–∞–≤' in tabs or '–º–∞—Ç–µ—Ä–∏–∞–ª' in tabs:
                text = tabs.get('—Å–æ—Å—Ç–∞–≤') or tabs.get('–º–∞—Ç–µ—Ä–∏–∞–ª')
                lines = [line.strip() for line in text.split('\n') if line.strip()]
                comp = []
                for line in lines:
                    if '–±—É—Ç—ã–ª–æ—á–∫–∞' in line.lower() or '—Ç—Ä—É–±–æ—á–∫–∞' in line.lower():
                        val = ':'.join(line.split(':')[1:]).strip()
                        if val:
                            comp.append(val)
                if comp:
                    result['composition'] = ', '.join(comp)

            if '–≤–æ–∑—Ä–∞—Å—Ç' in tabs:
                match = re.search(r'\b(\d[+‚Äì\-]?\d*\+?)\b', tabs['–≤–æ–∑—Ä–∞—Å—Ç'])
                if match:
                    age = match.group(1).strip()
                    if '–∫–∞—Ç–µ–≥–æ—Ä–∏—è' not in age.lower():
                        result['age'] = age

            if '—Ä–∞–∑–º–µ—Ä' in tabs or '–≥–∞–±–∞—Ä–∏—Ç—ã' in tabs:
                text = tabs.get('—Ä–∞–∑–º–µ—Ä') or tabs.get('–≥–∞–±–∞—Ä–∏—Ç—ã')
                dims = {}
                for line in text.split('\n'):
                    line = line.strip()
                    if '–¥–ª–∏–Ω–∞' in line.lower():
                        m = re.search(r'\d+[,.]?\d*', line)
                        if m: dims['length'] = m.group(0).replace(',', '.')
                    elif '—à–∏—Ä–∏–Ω–∞' in line.lower():
                        m = re.search(r'\d+[,.]?\d*', line)
                        if m: dims['width'] = m.group(0).replace(',', '.')
                    elif '–≤—ã—Å–æ—Ç–∞' in line.lower():
                        m = re.search(r'\d+[,.]?\d*', line)
                        if m: dims['height'] = m.group(0).replace(',', '.')
                if dims:
                    size_parts = []
                    if dims.get('length'):
                        size_parts.append(f"–î–ª–∏–Ω–∞: {dims['length']} —Å–º")
                    if dims.get('width'):
                        size_parts.append(f"–®–∏—Ä–∏–Ω–∞: {dims['width']} —Å–º")
                    if dims.get('height'):
                        size_parts.append(f"–í—ã—Å–æ—Ç–∞: {dims['height']} —Å–º")
                    result['size'] = ', '.join(size_parts)

            if not result['age'] or not result['size']:
                options = page.evaluate("""() => {
                    const opts = {};
                    document.querySelectorAll('.js-product-edition-option').forEach(block => {
                        const id = block.getAttribute('data-edition-option-id')?.trim();
                        const active = block.querySelector('.t-product__option-item_active');
                        if (id && active) opts[id] = active.innerText.trim();
                    });
                    return opts;
                }""")
                if '–í–æ–∑—Ä–∞—Å—Ç' in options and not result['age']:
                    result['age'] = options['–í–æ–∑—Ä–∞—Å—Ç']
                if '–û–±—ä–µ–º' in options and not result['volume']:
                    result['volume'] = options['–û–±—ä–µ–º']
                if '–†—É—á–∫–∏' in options and not result['handle']:
                    result['handle'] = options['–†—É—á–∫–∏']

            # --- –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –û–ë–™–Å–ú–ê –ò–ó URL, –ï–°–õ–ò –ù–ï–¢ –ù–ê –°–¢–†–ê–ù–ò–¶–ï ---
            if not result['volume'] or not result['volume'].strip():
                url_match = re.search(r'gb(\d+)', url, re.IGNORECASE)
                if url_match:
                    result['volume'] = f"{url_match.group(1)} –º–ª"

            if not result['vendorCode']:
                hash_input = f"{result['name']}_{url}"
                short_hash = hashlib.md5(hash_input.encode()).hexdigest()[:6].upper()
                result['vendorCode'] = f"PAO_{short_hash}"
                log(f"üîß –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞—Ä—Ç–∏–∫—É–ª: {result['vendorCode']}")

            if not result['name']:
                log(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω: {url} ‚Äî –Ω–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è")
                return None

            log(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {result['name']} | –ê—Ä—Ç: {result['vendorCode']} | –¶–≤–µ—Ç: {result['color']}")
            return result

        except Exception as e:
            log(f"‚ùå –û—à–∏–±–∫–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt+1}): {e}")
            if attempt == max_retries - 1:
                return None
            time.sleep(3)
    return None

def parse_catalog_page(page):
    log("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º...")
    all_products = []

    for filt in FILTERS:
        try:
            log(f"üîç –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ñ–∏–ª—å—Ç—Ä—É: {filt['name']} ({filt['url']})")
            page.goto(filt['url'], timeout=30000)
            page.wait_for_timeout(3000)

            for _ in range(10):
                try:
                    load_more = page.locator("div.js-store-load-more-btn:has-text('–ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ')")
                    if load_more.count() == 0 or not load_more.is_visible():
                        break
                    before_count = len(page.query_selector_all('.js-product, .t-store__card, .t-product'))
                    load_more.click()
                    page.wait_for_timeout(3000)
                    after_count = len(page.query_selector_all('.js-product, .t-store__card, .t-product'))
                    if after_count <= before_count:
                        break
                except Exception as e:
                    log(f"  ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥—Ä—É–∑–∫–µ: {e}")
                    break

            collection_id = filt['collection']

            products = page.evaluate("""(collectionId) => {
                const cards = document.querySelectorAll('.js-product, .t-store__card, .t-product');
                const result = [];
                
                for (let i = 0; i < cards.length; i++) {
                    const card = cards[i];
                    
                    const nameEl = card.querySelector('.js-product-name, .t-store__card__title, h3, .t-product__title');
                    const skuEl = card.querySelector('.js-store-prod-sku, .t-store__card__sku');
                    const linkEl = card.querySelector('a');
                    const imgEl = card.querySelector('.js-product-img, img');
                    const priceEl = card.querySelector('.t-store__card__price-value, .price');

                    if (!nameEl || !linkEl) continue;

                    let name = nameEl ? nameEl.innerText.trim() : '';

                    // --- –ì–ï–ù–ï–†–ê–¶–ò–Ø –ù–ê–ó–í–ê–ù–ò–Ø –í –ö–ê–¢–ê–õ–û–ì–ï ---
                    if (name && /^Glass\\s+[\\w\\s]+\\d{3}$/.test(name)) {
                        const match = name.match(/^Glass\\s+([\\w\\s]+)\\s+(\\d{3})$/);
                        if (match) {
                            const color = match[1].trim();
                            const volume = match[2];
                            name = `–°—Ç–µ–∫–ª—è–Ω–Ω–∞—è –±—É—Ç—ã–ª–æ—á–∫–∞ ${color}, ${volume} –º–ª`;
                        }
                    } else if (name && /^\\w+\\s+\\d{3}$/.test(name)) {
                        const parts = name.trim().split(/\\s+/);
                        const volume = parts.pop();
                        const color = parts.join(' ');
                        if (volume && volume.match(/^\\d{3}$/)) {
                            name = `–ü–ª–∞—Å—Ç–∏–∫–æ–≤–∞—è –±—É—Ç—ã–ª–æ—á–∫–∞ ${color}, ${volume} –º–ª`;
                        }
                    }

                    let vendorCode = skuEl ? skuEl.innerText.replace(/–ê—Ä—Ç–∏–∫—É–ª[:\\s]*/i, '').trim() : '';
                    const link = linkEl.href.trim();
                    const image = imgEl ? (imgEl.dataset.original || imgEl.src || '') : '';
                    const price = priceEl ? priceEl.innerText.replace(/[^\\d]/g, '') : '0';

                    // --- –§–ò–õ–¨–¢–† –î–£–ë–õ–ï–ô –ò –Ø–ö–û–†–ï–ô ---
                    if (!link || 
                        link.includes('#order') || 
                        link.includes('#catalog') || 
                        link.includes('#popup-buy') || 
                        link.endsWith('#')) {
                        continue;
                    }

                    let final_collection = collectionId;
                    if (name.toLowerCase().includes('–º–æ–ª–æ–∫–æ–æ—Ç—Å–æ—Å')) {
                        final_collection = 'molokootsosy';
                        if (!vendorCode) {
                            vendorCode = 'MOLOKOOSC_001';
                        }
                    }

                    // --- –ü–ï–†–ï–î–ê–ß–ê –û–ë–™–Å–ú–ê –ò–ó –ù–ê–ó–í–ê–ù–ò–Ø ---
                    let volume = '';
                    const vol_match = name.match(/(\\d{3})\\s*–º–ª|(\\d{3})$/);
                    if (vol_match) {
                        volume = vol_match[1] || vol_match[2];
                        if (volume) volume += ' –º–ª';
                    }

                    result.push({
                        name,
                        vendorCode,
                        price,
                        link,
                        image,
                        collection: final_collection,
                        volume: volume
                    });
                }
                return result;
            }""", collection_id)

            log(f"  ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {filt['name']}")
            all_products.extend(products)

        except Exception as e:
            log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ñ–∏–ª—å—Ç—Ä–∞ {filt['name']}: {e}")
            continue

    log(f"üì¶ –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ {len(all_products)} —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –≤—Å–µ–º —Ñ–∏–ª—å—Ç—Ä–∞–º")
    return all_products

def get_collection_images(products):
    coll_images = {}
    for coll_key in COLLECTIONS.keys():
        for prod in products:
            if prod.get('collection') == coll_key and coll_key not in coll_images:
                if prod.get('image'):
                    coll_images[coll_key] = prod['image'].strip()
                break
    return coll_images

def get_collection_description(collection_id, products):
    key_features = {
        "poilniki": "–ü–æ–∏–ª—å–Ω–∏–∫–∏ Paomma —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –ø—Ä–æ—Ç–µ–∫–∞–Ω–∏—è, —Å–∏–ª–∏–∫–æ–Ω–æ–≤–æ–π —Ä—É—á–∫–æ–π –∏ –∞–Ω—Ç–∏—Å–æ—Ä–±—Ü–∏–æ–Ω–Ω—ã–º –∫–ª–∞–ø–∞–Ω–æ–º. –ü–æ–¥—Ö–æ–¥—è—Ç –¥–ª—è –¥–µ—Ç–µ–π –æ—Ç 6 –º–µ—Å—è—Ü–µ–≤. –ë–µ–∑ –ë–§–ê –∏ —Ñ—Ç–∞–ª–∞—Ç–æ–≤.",
        "prorezyvateli": "–ü—Ä–æ—Ä–µ–∑—ã–≤–∞—Ç–µ–ª–∏ Paomma –∏–∑ 100% –ø–∏—â–µ–≤–æ–≥–æ —Å–∏–ª–∏–∫–æ–Ω–∞. –ê–Ω–∞—Ç–æ–º–∏—á–µ—Å–∫–∞—è —Ñ–æ—Ä–º–∞, –º—è–≥–∫–∏–µ —Ç–µ–∫—Å—Ç—É—Ä—ã, –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∫—Ä–∞—Å–∏—Ç–µ–ª–∏. –ü–æ–º–æ–≥–∞—é—Ç –ø—Ä–∏ –ø—Ä–æ—Ä–µ–∑—ã–≤–∞–Ω–∏–∏ –∑—É–±–æ–≤.",
        "soski": "–°–æ—Å–∫–∏ –¥–ª—è –±—É—Ç—ã–ª–æ—á–µ–∫ Paomma —Å –∞–Ω—Ç–∏–∫–æ–ª–∏–∫–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π, –ø–æ—Ç–æ–∫–∞–º–∏ S/M/L. –ò–∑ 100% –ø–∏—â–µ–≤–æ–≥–æ —Å–∏–ª–∏–∫–æ–Ω–∞. –ü–æ–¥—Ö–æ–¥—è—Ç –¥–ª—è –Ω–æ–≤–æ—Ä–æ–∂–¥—ë–Ω–Ω—ã—Ö.",
        "pustyshki": "–ü—É—Å—Ç—ã—à–∫–∏ Paomma –∏–∑ —Å–∏–ª–∏–∫–æ–Ω–∞ –∏ –ª–∞—Ç–µ–∫—Å–∞. –ê–Ω–∞—Ç–æ–º–∏—á–µ—Å–∫–∞—è —Ñ–æ—Ä–º–∞, –≤–µ–Ω—Ç–∏–ª—è—Ü–∏–æ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ä—Å—Ç–∏—è, –≥–∏–ø–æ–∞–ª–ª–µ—Ä–≥–µ–Ω–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª. –ü–æ–¥—Ö–æ–¥—è—Ç —Å —Ä–æ–∂–¥–µ–Ω–∏—è.",
        "derzhateli": "–î–µ—Ä–∂–∞—Ç–µ–ª–∏ –¥–ª—è –ø—É—Å—Ç—ã—à–µ–∫ Paomma —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º –∑–∞–º–∫–æ–º, —Ä–µ–≥—É–ª–∏—Ä—É–µ–º–æ–π –¥–ª–∏–Ω–æ–π. –ò–∑ –≥–∏–ø–æ–∞–ª–ª–µ—Ä–≥–µ–Ω–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤. –ù–µ —Ç–µ—Ä—è—é—Ç—Å—è.",
        "futlyary": "–§—É—Ç–ª—è—Ä—ã –¥–ª—è –ø—É—Å—Ç—ã—à–µ–∫ Paomma –≥–µ—Ä–º–µ—Ç–∏—á–Ω—ã–µ, –∫–æ–º–ø–∞–∫—Ç–Ω—ã–µ. –ó–∞—â–∏—â–∞—é—Ç –æ—Ç –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏–π. –£–¥–æ–±–Ω—ã –≤ –ø–æ–µ–∑–¥–∫–∞—Ö.",
        "smesi": "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –¥–ª—è —Å–º–µ—Å–∏ Paomma —Å –≥–µ—Ä–º–µ—Ç–∏—á–Ω—ã–º–∏ –æ—Ç—Å–µ–∫–∞–º–∏, –º–∞—Ä–∫–∏—Ä–æ–≤–∫–æ–π. –£–¥–æ–±–Ω—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏.",
        "molokootsosy": "–ú–æ–ª–æ–∫–æ–æ—Ç—Å–æ—Å—ã Paomma —Å —ç—Ä–≥–æ–Ω–æ–º–∏—á–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º, –º—è–≥–∫–∏–º–∏ –≤—Å—Ç–∞–≤–∫–∞–º–∏. –ë–µ–∑–æ–ø–∞—Å–Ω—ã –¥–ª—è –∫–æ–∂–∏. –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã –∏ –∫–æ–º—Ñ–æ—Ä—Ç–Ω—ã.",
        "butylochki": "–ë—É—Ç—ã–ª–æ—á–∫–∏ Paomma —Å –∞–Ω—Ç–∏–∫–æ–ª–∏–∫–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π, —à–∏—Ä–æ–∫–∏–º –≥–æ—Ä–ª—ã—à–∫–æ–º. –ò–∑ –ø–æ–ª–∏–ø—Ä–æ–ø–∏–ª–µ–Ω–∞. –ë–µ–∑ –ë–§–ê. –ü–æ–¥—Ö–æ–¥—è—Ç —Å —Ä–æ–∂–¥–µ–Ω–∏—è."
    }
    return key_features.get(collection_id, f"–ö–æ–ª–ª–µ–∫—Ü–∏—è: {COLLECTIONS.get(collection_id, {}).get('name', '–¢–æ–≤–∞—Ä—ã')}")

def is_feed_valid(lines):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Ñ–∏–¥ –∏–º–µ–µ—Ç –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É"""
    content = '\n'.join(lines)
    required = ['<yml_catalog', '<shop>', '<name>Paomma</name>', '<offers>', '</yml_catalog>']
    for req in required:
        if req not in content:
            return False
    return True

def generate_yml(products):
    log("üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è YML-—Ñ–∏–¥–∞...")

    real_urls = {}
    for filt in FILTERS:
        coll_id = filt.get('collection')
        if coll_id and coll_id in COLLECTIONS:
            real_urls[COLLECTIONS[coll_id]['name']] = filt['url'].strip()

    if '–ú–æ–ª–æ–∫–æ–æ—Ç—Å–æ—Å—ã' not in real_urls:
        real_urls['–ú–æ–ª–æ–∫–æ–æ—Ç—Å–æ—Å—ã'] = "https://paomma.ru/catalog/molokootsos"

    current_date = datetime.now().strftime("%Y-%m-%d %H:%M")
    header_lines = [
        '<?xml version="1.0" encoding="utf-8"?>',
        f'<yml_catalog date="{current_date}">',
        '  <shop>',
        '    <name>Paomma</name>',
        '    <company>Paomma</company>',
        '    <url>https://paomma.ru</url>',
        '    <platform>Tilda</platform>',
        '    <currencies>',
        '      <currency id="RUB" rate="1"/>',
        '    </currencies>',
        '    <categories>'
    ]

    cat_map = {
        "–ü–æ–∏–ª—å–Ω–∏–∫–∏": "952113747654",
        "–ü—Ä–æ—Ä–µ–∑—ã–≤–∞—Ç–µ–ª–∏": "206682998845",
        "–°–æ—Å–∫–∏": "169064286158",
        "–ü—É—Å—Ç—ã—à–∫–∏": "897379413064",
        "–î–µ—Ä–∂–∞—Ç–µ–ª–∏": "41033353415",
        "–§—É—Ç–ª—è—Ä—ã": "571209369666",
        "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –¥–ª—è —Å–º–µ—Å–∏": "952891154747",
        "–ú–æ–ª–æ–∫–æ–æ—Ç—Å–æ—Å—ã": "918219204990",
        "–ë—É—Ç—ã–ª–æ—á–∫–∏ –∏ –º–æ–ª–æ–∫–æ–æ—Ç—Å–æ—Å": "876147046474"
    }

    for name, cat_id in cat_map.items():
        header_lines.append(f'      <category id="{cat_id}">{name}</category>')

    header_lines += [
        '    </categories>',
        '    <offers>'
    ]

    footer_lines = [
        '    </offers>',
        '    <collections>'
    ]

    coll_images = get_collection_images(products)

    for coll_key, coll_data in COLLECTIONS.items():
        footer_lines.append(f'      <collection id="{coll_key}">')
        footer_lines.append(f'        <name>{coll_data["name"]}</name>')
        
        real_url = real_urls.get(coll_data["name"])
        if not real_url:
            log(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏: {coll_data['name']}")
            real_url = f"https://paomma.ru/{coll_key}"
        
        url_cdata = f"<![CDATA[{real_url}]]>"
        footer_lines.append(f'        <url>{url_cdata}</url>')
        
        if coll_images.get(coll_key):
            footer_lines.append(f'        <picture>{coll_images[coll_key]}</picture>')
        
        coll_desc = get_collection_description(coll_key, products)
        footer_lines.append(f'        <description>{coll_desc}</description>')
        footer_lines.append('      </collection>')

    footer_lines += [
        '    </collections>',
        '  </shop>',
        '</yml_catalog>'
    ]

    # --- –°–±–æ—Ä–∫–∞ —Ñ–∏–¥–∞ ---
    offer_lines = []
    used_ids = set()

    for prod in products:
        try:
            if not prod.get('vendorCode') or not prod.get('name'):
                continue

            category_id = "876147046474"
            if "–ø–æ–∏–ª—å–Ω–∏–∫" in prod['name'].lower():
                category_id = "952113747654"
            elif "–ø—Ä–æ—Ä–µ–∑—ã–≤–∞—Ç–µ–ª—å" in prod['name'].lower():
                category_id = "206682998845"
            elif "—Å–æ—Å–∫–∞" in prod['name'].lower():
                category_id = "169064286158"
            elif "–ø—É—Å—Ç—ã—à–∫–∞" in prod['name'].lower():
                category_id = "897379413064"
            elif "–¥–µ—Ä–∂–∞—Ç–µ–ª—å" in prod['name'].lower():
                category_id = "41033353415"
            elif "—Ñ—É—Ç–ª—è—Ä" in prod['name'].lower() or "–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø—É—Å—Ç—ã—à–µ–∫" in prod['name'].lower():
                category_id = "571209369666"
            elif "—Å–º–µ—Å–∏" in prod['name'].lower():
                category_id = "952891154747"
            elif "–º–æ–ª–æ–∫–æ–æ—Ç—Å–æ—Å" in prod['name'].lower():
                category_id = "918219204990"

            base_id = prod["vendorCode"]
            color_part = ""
            if prod.get('color') and prod['color'] != '–ù–µ —É–∫–∞–∑–∞–Ω':
                clean_color = prod['color'].split(':')[0].split('/catalog')[0].strip()
                clean_color = re.sub(r'[^a-z0-9]', '', clean_color.lower())
                color_part = f"_{clean_color}"

            unique_id = base_id + color_part

            if unique_id in used_ids:
                suffix = 1
                temp_id = f"{unique_id}_{suffix}"
                while temp_id in used_ids:
                    suffix += 1
                    temp_id = f"{unique_id}_{suffix}"
                unique_id = temp_id

            used_ids.add(unique_id)

            offer = [
                f'      <offer id="{unique_id}" available="true">',
                f'        <name>{prod["name"]}</name>',
                f'        <vendor>Paomma</vendor>',
                f'        <vendorCode>{prod["vendorCode"]}</vendorCode>',
                f'        <model>{prod["vendorCode"]}</model>',
                f'        <price>0</price>',
                f'        <currencyId>RUB</currencyId>',
                f'        <categoryId>{category_id}</categoryId>'
            ]

            url_cdata = f"<![CDATA[{prod['link'].strip()}]]>"
            offer.append(f'        <url>{url_cdata}</url>')

            if prod.get('image'):
                offer.append(f'        <picture>{prod["image"].strip()}</picture>')
            for img in prod.get('additional_images', []):
                if img and img != prod.get('image'):
                    offer.append(f'        <picture>{img.strip()}</picture>')

            if prod.get('color') and prod['color'] != '–ù–µ —É–∫–∞–∑–∞–Ω':
                clean_color = prod['color'].split(':')[0].strip()
                offer.append(f'        <param name="–¶–≤–µ—Ç">{translate_color(clean_color)}</param>')
            if prod.get('size'):
                offer.append(f'        <param name="–†–∞–∑–º–µ—Ä">{prod["size"]}</param>')
            if prod.get('volume'):
                offer.append(f'        <param name="–û–±—ä—ë–º">{prod["volume"]}</param>')
            if prod.get('material'):
                offer.append(f'        <param name="–ú–∞—Ç–µ—Ä–∏–∞–ª">{prod["material"]}</param>')
            if prod.get('age'):
                offer.append(f'        <param name="–í–æ–∑—Ä–∞—Å—Ç">{prod["age"]}</param>')
            if prod.get('handle'):
                offer.append(f'        <param name="–†—É—á–∫–∏">{prod["handle"]}</param>')
            if prod.get('composition'):
                offer.append(f'        <param name="–°–æ—Å—Ç–∞–≤">{prod["composition"]}</param>')

            coll_id = prod.get('collection')
            if coll_id and coll_id in COLLECTIONS:
                offer.append(f'        <param name="collection">{coll_id}</param>')
                offer.append(f'        <collectionId>{coll_id}</collectionId>')

            # --- DESCRIPTION: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º ---
            desc_parts = []
            name = prod.get('name', '').lower()

            if prod.get('description') and prod['description'].strip():
                raw_desc = prod['description'].strip()
                clean_desc = re.sub(r'–ê—Ä—Ç–∏–∫—É–ª[:\s]+[A-Z0-9]+[\s]*', '', raw_desc, flags=re.IGNORECASE)
                clean_desc = re.sub(r'[\t\n\r]+', '. ', clean_desc)

                keywords = sorted([
                    '–î–∏–∞–º–µ—Ç—Ä –≥–æ—Ä–ª—ã—à–∫–∞', '–î–∏–∞–º–µ—Ç—Ä —à–∏—Ä–æ–∫–æ–π —á–∞—Å—Ç–∏ –±—É—Ç—ã–ª–æ—á–∫–∏', '–î–∏–∞–º–µ—Ç—Ä —Å–æ—Å–∫–∏',
                    '–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏', '–í—ã—Å–æ—Ç–∞', '–ü–æ—Ç–æ–∫', '–ú–∞—Ç–µ—Ä–∏–∞–ª —Å–æ—Å–∫–∏', '–ú–∞—Ç–µ—Ä–∏–∞–ª –±—É—Ç—ã–ª–æ—á–∫–∏',
                    '–û–±—ä–µ–º', '–ü–∏—Ç–∞–Ω–∏–µ', '–ú–∞—Ç–µ—Ä–∏–∞–ª –∏–∑–¥–µ–ª–∏—è', '–¢–∏–ø —Å—Ü–µ–∂–∏–≤–∞–Ω–∏—è', '–ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä',
                    '–î–ª–∏–Ω–∞ —É–ø–∞–∫–æ–≤–∫–∏', '–í—ã—Å–æ—Ç–∞ —É–ø–∞–∫–æ–≤–∫–∏', '–®–∏—Ä–∏–Ω–∞ —É–ø–∞–∫–æ–≤–∫–∏', '—Ä–∞–∑–º–µ—Ä'
                ], key=len, reverse=True)

                escaped = [re.escape(kw) for kw in keywords]
                pattern = r'(' + '|'.join(escaped) + r')\.\s*([^.]*)'

                def replace_match(m):
                    key = m.group(1)
                    value = m.group(2).strip()
                    return f"{key}: {value}"

                clean_desc = re.sub(pattern, replace_match, clean_desc)

                raw_params = [p.strip() for p in re.split(r'[.]', clean_desc) if p.strip()]
                for param in raw_params:
                    if '–∞—Ä—Ç–∏–∫—É–ª' in param.lower():
                        continue
                    if ':' in param and param.count(':') == 1:
                        desc_parts.append(param)
                    elif param.strip():
                        desc_parts.append(param)
            else:
                volume = prod.get('volume', '')
                if "—Å—Ç–µ–∫–ª—è–Ω–Ω–∞—è –±—É—Ç—ã–ª–æ—á–∫–∞" in name:
                    desc = f"–°—Ç–µ–∫–ª—è–Ω–Ω–∞—è –±—É—Ç—ã–ª–æ—á–∫–∞ Paomma –æ–±—ä—ë–º–æ–º {volume}. –ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∞ –∏–∑ –ø—Ä–æ—á–Ω–æ–≥–æ —Å—Ç–µ–∫–ª–∞, –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –Ω–æ–≤–æ—Ä–æ–∂–¥—ë–Ω–Ω—ã—Ö. –ê–Ω—Ç–∏–∫–æ–ª–∏–∫–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞. –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Å—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏–∏."
                elif "–ø–ª–∞—Å—Ç–∏–∫–æ–≤–∞—è –±—É—Ç—ã–ª–æ—á–∫–∞" in name or "–±—É—Ç—ã–ª–æ—á–∫–∞" in name:
                    desc = f"–ü–ª–∞—Å—Ç–∏–∫–æ–≤–∞—è –±—É—Ç—ã–ª–æ—á–∫–∞ Paomma –æ–±—ä—ë–º–æ–º {volume}. –ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∞ –∏–∑ 100% –ø–æ–ª–∏–ø—Ä–æ–ø–∏–ª–µ–Ω–∞, –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –Ω–æ–≤–æ—Ä–æ–∂–¥—ë–Ω–Ω—ã—Ö. –ê–Ω—Ç–∏–∫–æ–ª–∏–∫–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞. –£–¥–æ–±–Ω–∞ –≤ —É—Ö–æ–¥–µ."
                else:
                    desc = f"–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –¥–ª—è –¥–µ—Ç–µ–π –æ—Ç –±—Ä–µ–Ω–¥–∞ Paomma. –ü–æ–¥—Ö–æ–¥–∏—Ç —Å —Ä–æ–∂–¥–µ–Ω–∏—è."
                desc_parts.append(desc)

            description = ". ".join(desc_parts).strip()
            if description and not description.endswith('.'):
                description += "."
            description = re.sub(r'\.{2,}', '.', description)
            description = description.replace('&', '&amp;').replace('<', '<').replace('>', '>')
            offer.append(f'        <description>{description}</description>')

            # --- SALES_NOTES ---
            sales_notes_parts = []
            if prod.get('color') and prod['color'] != '–ù–µ —É–∫–∞–∑–∞–Ω':
                clean_color = prod['color'].split(':')[0].strip()
                sales_notes_parts.append(f"–¶–≤–µ—Ç: {translate_color(clean_color)}")
            if prod.get('volume'):
                sales_notes_parts.append(f"–û–±—ä—ë–º: {prod['volume']}")
            if prod.get('age'):
                sales_notes_parts.append(f"–í–æ–∑—Ä–∞—Å—Ç: {prod['age']}")
            if prod.get('material'):
                sales_notes_parts.append(f"–ú–∞—Ç–µ—Ä–∏–∞–ª: {prod['material']}")
            if not sales_notes_parts:
                sales_notes_parts.append("–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç Paomma")
            else:
                sales_notes_parts.append("–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç Paomma")

            sales_notes = ". ".join(sales_notes_parts) + "."
            offer.append(f'        <sales_notes>{sales_notes}</sales_notes>')
            offer.append('      </offer>')

            offer_lines.extend(offer)

        except Exception as e:
            log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ offer –¥–ª—è {prod.get('name', 'unknown')}: {e}")
            continue

    # --- –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–∏–¥–∞ ---
    full_lines = header_lines + offer_lines + footer_lines

    if not is_feed_valid(full_lines):
        log("‚ùå –§–∏–¥ –Ω–µ –ø—Ä–æ—à—ë–ª –ø—Ä–æ–≤–µ—Ä–∫—É –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ ‚Äî –Ω–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω")
        return

    # --- –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è ---
    if os.path.exists(YML_FILE):
        backup_name = YML_FILE + ".backup."
        shutil.copy2(YML_FILE, backup_name)
        log(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_name}")

    # --- –ê—Ç–æ–º–∞—Ä–Ω–∞—è –∑–∞–ø–∏—Å—å ---
    try:
        with open(TEMP_YML_FILE, 'w', encoding='utf-8') as f:
            f.write('\n'.join(full_lines))
        os.replace(TEMP_YML_FILE, YML_FILE)
        log(f"‚úÖ YML-—Ñ–∏–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {YML_FILE}")
    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∏–¥–∞: {e}")

# --- –ó–ê–ü–£–°–ö ---
if __name__ == "__main__":
    log("üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ paomma.ru")
    progress = load_progress()
    all_products = progress["products"]
    seen_links = {p['link'].strip() for p in all_products}

    with sync_playwright() as p:
        browser = p.chromium.launch(headless=True)
        context = browser.new_context(user_agent=USER_AGENT)
        page = context.new_page()

        try:
            log("üì¶ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º...")
            product_list = parse_catalog_page(page)
            new_items = [item for item in product_list if item['link'].strip() not in seen_links]
            log(f"üÜï –ù–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞: {len(new_items)}")

            for i, item in enumerate(new_items, 1):
                log(f"‚û°Ô∏è –¢–æ–≤–∞—Ä {i}/{len(new_items)}: {item['link']}")
                full_data = parse_product_page(page, item['link'])
                if full_data:
                    full_data.update({
                        'name': item['name'],
                        'price': item['price'] or full_data.get('price', '0'),
                        'link': item['link'],
                        'image': item['image'] or full_data.get('image', ''),
                        'collection': item.get('collection'),
                        'volume': item.get('volume') or full_data.get('volume', '')
                    })
                    all_products.append(full_data)
                    save_progress(all_products)
                time.sleep(random.uniform(1.0, 2.5))

            generate_yml(all_products)
            log(f"üéâ –ì–æ—Ç–æ–≤–æ! –í—Å–µ–≥–æ: {len(all_products)}")

        except Exception as e:
            log(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            save_progress(all_products)
        finally:
            browser.close()
            log("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç.")

    log("‚úÖ –ì–æ—Ç–æ–≤–æ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞–ø–∫—É 'output'.")
